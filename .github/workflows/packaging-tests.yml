name: Packaging Tests

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]
  release:
    types: [created]
  workflow_dispatch:

  schedule:
    - cron: '0 0 * * SUN'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
      - name: Build dists
        run: python setup.py sdist bdist_wheel
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: 'dists'
          path: 'dist/*'

  test:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Delete package root
      run: rm -Rf wwb_scanner
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -U pytest pytest-cov coveralls
    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: 'dists'
        path: dist
    - name: Install wheel
      run: pip install dist/*.whl
    - name: Test built wheel
      run: py.test -o testpaths=tests
    - name: Install sdist
      run: |
        pip uninstall -y rtlsdr-wwb-scanner
        pip install dist/*.tar.gz
    - name: Test built sdist
      run: py.test -o testpaths=tests

  deploy:
    needs: test
    if: ${{ success() && github.event_name == 'release' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel twine
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: 'dists'
          path: dist
      - name: Publish to PyPI
        env:
          TWINE_REPOSITORY_URL: ${{ secrets.TWINE_REPOSITORY_URL }}
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: twine upload dist/*
